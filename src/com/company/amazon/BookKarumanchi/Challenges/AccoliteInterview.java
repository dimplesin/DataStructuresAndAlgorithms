package com.company.amazon.BookKarumanchi.Challenges;/*
package Challenges;

*/
/**
 * Created by v-dsindhi on 5/15/15.
 */

public class AccoliteInterview {

    public void findingSequenceUnsorted(){

        int arr[] = {2, 5, 9, 11, 6, 12, 18, 21};

        int i=0;
        int length = arr.length;
        int startIndex = 0;
        int endIndex = 0;
        int actualStartIndex = 0;
        int actualEndIndex = 0;
        for(i=0;i<arr.length;i++) {
            if(arr[i] > arr[i+1]){
                startIndex = i;
            }
        }
        for (int j=0;j<length;j++){
            if(arr[j] < arr[startIndex]){
                if(arr[j+1] != 0){
                    actualStartIndex = j+1;
                }else{
                    actualStartIndex = j;
                }
            }
        }
        if(startIndex == length-1){
           // return;
        }
        endIndex = startIndex;
    }

   // 2,5,9, 11, 25, 12, 18, 21



   // Q - You have been given input integer array. You have to generate an output integer array using this array where each element of output array can be generated by multiplying all input array elements and dividing the result by value at same index in input array. Do not use division operator.

    public void generateArray() {
        int arr[] = {2, 5, 6, 9, 10};
        int multiplyOfArray = 1;
        int[] outputArray = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            multiplyOfArray = arr[i] * multiplyOfArray;
        }
        for (int i = 0; i < arr.length; i++) {
            outputArray[i] = divide(multiplyOfArray, arr[i]);
        }
    }

    public int divide(int a, int b) {
        if (b == 0) {
        }
        int negativeSign = 1;

        if (a < 0) {
            a = -a;
            negativeSign = -negativeSign;
        }
        if (b < 0) {
            b = -b;
            negativeSign = -negativeSign;
        }
        int result = 0;
        while (a >= 0) {
            a -= b;
            result++;
        }
        return (result - 1) * negativeSign;
    }


    public int method1() throws ArithmeticException {
        try{
            System.exit(0);
        }finally {
            return 2;
        }
    }

    public static void main (String args[]){
        AccoliteInterview al = new AccoliteInterview();
        System.out.println(al.method1());
    }
}

/* ClassNotFoundError and NoDefClassError
  * Hashcode and equals agreement
   * No of threads than can modify concurrentHashMap 16
   * How ConcurrentHashMap works internally
   * Generic Type example with subType
   * Composition and Aggregation
   * List and set which is better for search
   * Unique object and we have to maintain order of insertion
   * File auto closeable in Java 1.7   try (BufferedReader br =
                   new BufferedReader(new FileReader(path))) {
        return br.readLine();
    }
    }
    SOLID : principles to be done
    Custom Exception to be unchecked exception  : The only way of doing it is to extend Exception
     (or a subclass thereof) for a checked exception,
      and extending RuntimeException (or a subclass thereof)
      for an unchecked exception

      Why method overriding does not support super class exception

    */